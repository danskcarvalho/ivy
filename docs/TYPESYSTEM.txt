
data TypeName = Reference(uint) | Symbol(S :: const Symbol*) where S != null
data Type = TypeName(TypeName, P :: [const Type*]) where P.All(X => X != null)
            Function(FunctionOptions, [Kind], [FunctionParameter], FunctionParameter)

data FunctionCallingConvention = IvyCall | CCall 
data FunctionArgumentRef = Copy | Ref | Move          
data FunctionOptions = {
                          CallingConvention :: FunctionCallingConvention
                       }
data FunctionParameter = {
                            IsLet :: bool
                            IsVolatile :: bool
                            Ref :: FunctionArgumentRef
                            Type :: const Type*
                         }        
data Kind = Proper(Id :: uint?) | Class(Id :: uint?)
            Constructor(Kind, [Kind], Kind) | Type(const Type*) //<A :: *, Equatable<A>> -> * => 
                                                                //   Constructor(Proper(0), 
                                                                //       [Type(&[TypeName(Symbol(EquatableSymbol), [&[Reference(0)]])])], Proper(0))