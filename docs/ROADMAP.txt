Ivy

Protótipo
- A idéia é que tenha o mínimo para eu começar o desenvolvimento do próprio compilador

O que vou suportar?
-Declarações (type, data (union, discrimination, struct), class, instance, extension, function, variable, import, module, specialization, statement) 
-Default discriminator
-Value for discriminator
-Nullable type
-Default array type
-Default map type
-Default set type
-Simple initialization (in the order they are defined)
-typeid, sizeof
-lambda
-fail
-defer
-No new declaration type
-Validator for discriminator. Ex.:
    data CallingConvention = StdCall | CCall 
            CustomCall(Index :: uint) where Index >= 2 throw EValidation("Index", "Index < 2")

O que não vou suportar? (mas planejo suportar na versão definitiva)]
-No mixins. Ex.:
    instance IASTNodePrintable<T> -> CPrintable<ASTNode<T>> = mixin(self.Name)
    self.Name is of a type that is printable
-Null propagation
-await/yield
-assert introducing new variables
-is operator (only pattern matching is not supported)
-reflection
-no data declaration with declaration body (will never support)
-no string interpolation
-no exception handling
-goto/labels
-no shapes (like Sum(int, int) -> {X :: int, Y :: int})
-no #line
-no default
-Will never support default types for type parameters
